generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id                 String                     @id @default(cuid())
  createdAt          DateTime              @default(now())
  displayName        String @unique
  urlSafeName        String @unique
  viewCount          Int @default(0)
  previousUpdater    String?
  games              Game[]
  gameAffiliateCodes ChannelAffiliateCode[]
  customGameCommands ChannelCustomGameCommand[]
  kits               Kit[]
  overlay            ChannelKitOverlay?
  managers           ChannelManager[]
  profile            ChannelProfile?
  plan               ChannelPlan?
  links              ChannelLink[]
}

model ChannelProfile {
  id              String              @id @default(cuid())
  brandColors     ChannelBrandColor[]
  hasCoverPhoto   Boolean @default(false)
  hasProfileImage Boolean @default(false)
  youtubeAutoplay Boolean
  channelPcSpecs  ChannelPcSpec[]
  affiliates      ChannelAffiliate[]
  setupPhotos     SetupPhoto[]
  channel         Channel             @relation(fields: [channelId], references: [id])
  channelId       String              @unique
}

model SetupPhoto {
  id               String         @id @default(cuid())
  channelProfile   ChannelProfile @relation(fields: [channelProfileId], references: [id])
  channelProfileId String
  slot             Int
  exists           Boolean

  @@unique([channelProfileId, slot])
}

enum LinkProperties {
  TWITCH
  YOUTUBE
  INSTAGRAM
  TWITTER
  FACEBOOK
  DISCORD
  TIKTOK
}

model ChannelLink {
  id        String         @id @default(cuid())
  property  LinkProperties
  value     String
  channel   Channel        @relation(fields: [channelId], references: [id])
  channelId String
}

model ChannelPlan {
  id                   String  @id @default(cuid())
  stripeSubscriptionId String
  type                 String  @default("basic")
  channel              Channel @relation(fields: [id], references: [id])
}

model ChannelPcSpec {
  id               String         @id @default(cuid())
  partType         String
  partName         String
  channelProfile   ChannelProfile @relation(fields: [channelProfileId], references: [id])
  channelProfileId String

  @@unique([channelProfileId, partType])
}

model ChannelAffiliate {
  id               String          @id @default(cuid())
  code             String?
  description      String?
  company          String?
  url              String?
  channelProfile   ChannelProfile? @relation(fields: [channelProfileId], references: [id])
  channelProfileId String?
}

model ChannelBrandColor {
  id               String          @id @default(cuid())
  // "type" refers to "primary", "secondary", "accent"...
  type             String
  value            String
  channelProfile   ChannelProfile? @relation(fields: [channelProfileId], references: [id])
  channelProfileId String?
}

model ChannelManager {
  id         String  @id @default(cuid())
  firebaseId String
  role       String
  channel    Channel @relation(fields: [channelId], references: [id])
  channelId  String
}

enum OverlayVisibilityStates {
  ON
  OFF
}

model ChannelKitOverlay {
  id                       String                  @id @default(cuid())
  channel                  Channel                 @relation(fields: [channelId], references: [id])
  channelId                String                  @unique
  backgroundColorPrimary   String?
  backgroundColorSecondary String?
  textColorPrimary         String?
  textColorSecondary       String?
  textColorAccent          String?
  isOverlayVisible         OverlayVisibilityStates @default(OFF)
  primaryKit               Kit?                    @relation(name: "primaryKitOverlay", fields: [primaryKitId], references: [id])
  primaryKitId             String?                 @unique
  secondaryKit             Kit?                    @relation(name: "secondaryKitOverlay", fields: [secondaryKitId], references: [id])
  secondaryKitId           String?                 @unique
}

model Kit {
  id                         String             @id @default(cuid())
  customTitle                String?
  blueprint                  String?
  featured                   Boolean            @default(false)
  youtubeUrl                 String?
  tiktokUrl                  String?
  quote                      String?
  options                    KitOption[]
  game                       Game               @relation(fields: [gameId], references: [id])
  gameId                     String
  kitBase                    KitBase            @relation(fields: [kitBaseId], references: [id])
  kitBaseId                  String
  channel                    Channel            @relation(fields: [channelId], references: [id])
  channelId                  String
  channelKitOverlayPrimary   ChannelKitOverlay? @relation(name: "primaryKitOverlay")
  channelKitOverlaySecondary ChannelKitOverlay? @relation(name: "secondaryKitOverlay")
}

model ChannelCustomGameCommand {
  id        String  @id @default(cuid())
  command   String
  game      Game    @relation(fields: [gameId], references: [id])
  gameId    String
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
}

model ChannelAffiliateCode {
  id        String  @id @default(cuid())
  channel   Channel @relation(fields: [channelId], references: [id])
  channelId String
  game     Game @relation(fields: [gameId], references: [id])
  gameId    String
  code      String
}

model KitOption {
  id             String  @id @default(cuid())
  gameId         String
  game          Game    @relation(fields: [gameId], references: [id])
  displayName    String
  slotKey        String
  orderPlacement Int
  kitBase            KitBase @relation(fields: [kitBaseId], references: [id])
  kitBaseId          String
  channelKits    Kit[]
}

model KitBase {
  id               String          @id @default(cuid())
  displayName      String
  game             Game            @relation(fields: [gameId], references: [id])
  gameId           String
  imageUrl         String
  blurb            String
  maxOptions       Int
  stats            KitStat[]
  commandCodes     CommandCode[]
  availableOptions KitOption[]
  category         KitBaseCategory @relation(fields: [categoryId], references: [id])
  categoryId       String
  kits             Kit[]
}

model KitBaseCategory {
  id          String    @id @default(cuid())
  displayName String    @unique
  kit         KitBase[]
}

model CommandCode {
  id        String  @id @default(cuid())
  code      String
  kitBase   KitBase @relation(fields: [kitBaseId], references: [id])
  kitBaseId String
}

model KitStat {
  id          String  @id @default(cuid())
  displayName String
  value       String
  kitBase     KitBase @relation(fields: [kitBaseId], references: [id])
  kitBaseId   String
}

model Game {
  id                    String                     @id @default(cuid())
  displayName           String
  urlSafeName           String
  backgroundImageUrl    String
  titleImageUrl         String
  active                Boolean
  blurDataUrl           String
  developer             String
  genres                Genre[]
  platforms             Platform[]
  releaseDate           DateTime
  kitBases              KitBase[]
  channels              Channel[]
  channelAffiliateCodes ChannelAffiliateCode[]
  customCommandStrings  ChannelCustomGameCommand[]
  kits                  Kit[]
  kitOptions            KitOption[]
}

model Platform {
  id          String @id @default(cuid())
  displayName String @unique
  games       Game[]
}

model Genre {
  id          String @id @default(cuid())
  displayName String @unique
  games       Game[]
}

model BlogPost {
  id        String   @id @default(cuid())
  author    String
  createdAt DateTime
  title     String   @unique
  slug      String   @unique
  markdown  String
}
